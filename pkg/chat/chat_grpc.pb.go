// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_StreamDataChanges_FullMethodName = "/chat.ChatService/StreamDataChanges"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	StreamDataChanges(ctx context.Context, in *StreamDataChangesRequest, opts ...grpc.CallOption) (ChatService_StreamDataChangesClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) StreamDataChanges(ctx context.Context, in *StreamDataChangesRequest, opts ...grpc.CallOption) (ChatService_StreamDataChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_StreamDataChanges_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceStreamDataChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_StreamDataChangesClient interface {
	Recv() (*DataChangeEvent, error)
	grpc.ClientStream
}

type chatServiceStreamDataChangesClient struct {
	grpc.ClientStream
}

func (x *chatServiceStreamDataChangesClient) Recv() (*DataChangeEvent, error) {
	m := new(DataChangeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations should embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	StreamDataChanges(*StreamDataChangesRequest, ChatService_StreamDataChangesServer) error
}

// UnimplementedChatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) StreamDataChanges(*StreamDataChangesRequest, ChatService_StreamDataChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDataChanges not implemented")
}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_StreamDataChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDataChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).StreamDataChanges(m, &chatServiceStreamDataChangesServer{stream})
}

type ChatService_StreamDataChangesServer interface {
	Send(*DataChangeEvent) error
	grpc.ServerStream
}

type chatServiceStreamDataChangesServer struct {
	grpc.ServerStream
}

func (x *chatServiceStreamDataChangesServer) Send(m *DataChangeEvent) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDataChanges",
			Handler:       _ChatService_StreamDataChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
